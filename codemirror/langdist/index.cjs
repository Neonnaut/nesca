'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var lr = require('@lezer/lr');
var language = require('@codemirror/language');
var highlight = require('@lezer/highlight');

// This file was generated by lezer-generator. You probably shouldn't edit it.
const parser = lr.LRParser.deserialize({
  version: 14,
  states: "nQYQPOOOOQO'#Ch'#ChOOQO'#Cd'#CdQYQPOOOOQO-E6b-E6b",
  stateData: "t~OZOSPOS~ORPOSPOTPOUPOVPO~OUSTVRZPV~",
  goto: "h]PPPPPPPP^PPPdQRORSRTQOR",
  nodeNames: "âš  LineComment Program Operator Directive DirectiveKeyword Filter RegExp",
  maxTerm: 12,
  skippedNodes: [0,1],
  repeatNodeCount: 1,
  tokenData: "0j~RmXY!|YZ!|]^!|pq!|st#_tu#vuv#{xy#vyz#vz{#v{|#v![!]$W!]!^%S!_!`%S!`!a%S!a!b#v!}#O#v#O#P#v#P#Q#v#Q#R#v#V#W%X#Y#Z)X#`#a)}#f#g*m#g#h,h#k#l/w#o#p#v#p#q#v#q#r#v~#RSZ~XY!|YZ!|]^!|pq!|~#dSP~OY#_Z;'S#_;'S;=`#p<%lO#_~#sP;=`<%l#_~#{OV~~$OPpq$R~$WOU~~$]QR~!O!P$c!Q![$t~$fP!Q![$i~$nQR~!Q![$i#R#S$i~$yRR~!O!P$i!Q![$t#R#S$t~%XOR~~%[Q#T#U%b#c#d&u~%eP#h#i%h~%kP#X#Y%n~%qP#Z#[%t~%wP#c#d%z~%}P#f#g&Q~&TP#]#^&W~&ZP#X#Y&^~&aP#g#h&d~&gP![!]&j~&mPpq&p~&uOS~~&xP#f#g&{~'OP#c#d'R~'UP#b#c'X~'[P#T#U'_~'bP#`#a'e~'hP}!O'k~'nP#a#b'q~'tP#X#Y'w~'zP#h#i'}~(QP#T#U(T~(WP#h#i(Z~(^P#[#](a~(dP#X#Y(g~(jP#g#h(m~(pP#]#^(s~(vP#g#h(y~(|QYZ)Spq)S~)XOT~~)[P#]#^)_~)bP#`#a)e~)hP#h#i)k~)nP#X#Y)q~)tP#f#g)w~)zP![!]#{~*QP#X#Y*T~*WP#h#i*Z~*^P#h#i*a~*dP#X#Y*g~*jP#f#g&^~*pQ#T#U*v#X#Y,O~*yP#b#c*|~+PP#W#X+S~+VP#c#d+Y~+]P#a#b+`~+cP}!O+f~+iP#f#g+l~+oP#T#U+r~+uP#h#i+x~+{P#X#Y&d~,RP#^#_,U~,XP#X#Y,[~,_P#V#W,b~,eP#h#i)w~,kP#h#i,n~,qP#W#X,t~,wP}!O,z~,}Q#T#U-T#]#^.i~-WP#g#h-Z~-^P#g#h-a~-dP#]#^-g~-jP#a#b-m~-pP#]#^-s~-vP#`#a-y~-|P#T#U.P~.SP#h#i.V~.YP#]#^.]~.`P#c#d.c~.fP#b#c(s~.lP#d#e.o~.rP#T#U.u~.xP}!O.{~/OP#Y#Z/R~/UP#X#Y/X~/[P#T#U/_~/bP#h#i/e~/hP#i#j/k~/nP#f#g/q~/tP#X#Y(s~/zQ#]#^0Q#c#d0^~0TP#h#i0W~0ZP#[#]&d~0aP#f#g0d~0gP#W#X&^",
  tokenizers: [0],
  topRules: {"Program":[0,2]},
  tokenPrec: 27
});

const lexiferLanguage = language.LRLanguage.define({
    parser: parser.configure({
        props: [
            language.indentNodeProp.add({
                Application: language.delimitedIndent({ closing: ")", align: false })
            }),
            language.foldNodeProp.add({
                Application: language.foldInside
            }),
            highlight.styleTags({
                Identifier: highlight.tags.variableName,
                LineComment: highlight.tags.lineComment,
                Name: highlight.tags.name,
                Operator: highlight.tags.operator,
                Directive: highlight.tags.className,
                DirectiveKeyword: highlight.tags.keyword,
                Filter: highlight.tags.modifier,
                RegExp: highlight.tags.regexp
            })
        ]
    }),
    languageData: {
        commentTokens: { line: "#" }
    }
});
function lexifer() {
    return new language.LanguageSupport(lexiferLanguage);
}

exports.lexifer = lexifer;
exports.lexiferLanguage = lexiferLanguage;
